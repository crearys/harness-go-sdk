openapi: 3.0.1
info:
  title: Access Control API Reference
  description: This is the Open Api Spec 3 for the Access Control Service. This is
    under active development. Beware of the breaking change with respect to the generated
    code stub
  termsOfService: https://harness.io/terms-of-use/
  contact:
    email: contact@harness.io
  version: "1.0"
servers:
- url: https://app.harness.io/gateway/authz/api
tags:
- name: acl
  description: This contains the APIs to perform access control checks
- name: aggregator
  description: This contains the APIs to change the state of the Aggregator
- name: permissions
  description: This contains the APIs related to permissions
- name: aclPreference
  description: This contains the APIs related to preference on enforcing access control
    checks
- name: roleAssignments
  description: This contains APIs for CRUD on role assignments
- name: roles
  description: This contains APIs for CRUD on roles
paths:
  /acl:
    post:
      tags:
      - acl
      summary: Check for permission on resource(s) for a principal
      operationId: getAccessControlList
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessCheckRequest'
          application/yaml:
            schema:
              $ref: '#/components/schemas/AccessCheckRequest'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Result of the access check request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTOAccessCheckResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTOAccessCheckResponse'
  /permissions/resourcetypes:
    get:
      tags:
      - permissions
      summary: Get all resource types for permissions in a scope or in the system.
      operationId: getPermissionResourceTypesList
      parameters:
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: scopeFilterDisabled
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: List of resource types
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTOSetString'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTOSetString'
  /permissions:
    get:
      tags:
      - permissions
      summary: Get all permissions in a scope or all permissions in the system.
      operationId: getPermissionList
      parameters:
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: scopeFilterDisabled
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: boolean
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: List of all permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTOListPermissionResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTOListPermissionResponse'
  /roleassignments/validate:
    post:
      tags:
      - roleAssignments
      summary: Check whether a proposed role assignment is valid.
      operationId: validateRoleAssignment
      parameters:
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignmentValidationRequest'
          application/yaml:
            schema:
              $ref: '#/components/schemas/RoleAssignmentValidationRequest'
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Role Assignment validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleAssignmentValidationResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleAssignmentValidationResponse'
  /roleassignments/aggregate:
    post:
      tags:
      - roleAssignments
      summary: List role assignments in the scope according to the given filter with
        added metadata
      operationId: getRoleAssignmentAggregateList
      parameters:
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Filter role assignments based on multiple parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignmentFilter'
          application/yaml:
            schema:
              $ref: '#/components/schemas/RoleAssignmentFilter'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Paginated list of role assignments in the scope according to
            the given filter with added metadata.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleAssignmentAggregateResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleAssignmentAggregateResponse'
  /roleassignments/filter:
    post:
      tags:
      - roleAssignments
      summary: List role assignments in the scope according to the given filter
      operationId: getFilteredRoleAssignmentList
      parameters:
      - name: pageIndex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 50
      - name: sortOrders
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/SortOrder'
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Filter role assignments based on multiple parameters.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignmentFilter'
          application/yaml:
            schema:
              $ref: '#/components/schemas/RoleAssignmentFilter'
        required: true
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Paginated list of role assignments in the scope according to
            the given filter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTOPageResponseRoleAssignmentResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTOPageResponseRoleAssignmentResponse'
  /roleassignments:
    get:
      tags:
      - roleAssignments
      summary: List role assignments in the given scope
      operationId: getRoleAssignmentList
      parameters:
      - name: pageIndex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 50
      - name: sortOrders
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/SortOrder'
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Paginated list of role assignments in the given scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTOPageResponseRoleAssignmentResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTOPageResponseRoleAssignmentResponse'
    post:
      tags:
      - roleAssignments
      summary: Create role assignment in the given scope
      operationId: postRoleAssignment
      parameters:
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignment'
          application/yaml:
            schema:
              $ref: '#/components/schemas/RoleAssignment'
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Created role assignment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleAssignmentResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleAssignmentResponse'
  /roleassignments/{identifier}:
    put:
      tags:
      - roleAssignments
      summary: Update existing role assignment by identifier and scope. Only changing
        the disabled/enabled state is allowed.
      operationId: putRoleAssignment
      parameters:
      - name: identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignment'
          application/yaml:
            schema:
              $ref: '#/components/schemas/RoleAssignment'
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Updated role assignment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleAssignmentResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleAssignmentResponse'
    delete:
      tags:
      - roleAssignments
      summary: Delete an existing role assignment by identifier
      operationId: deleteRoleAssignment
      parameters:
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Deleted role assignment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleAssignmentResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleAssignmentResponse'
  /roleassignments/multi:
    post:
      tags:
      - roleAssignments
      summary: Create multiple role assignments in a scope. Returns all successfully
        created role assignments. Ignores failures and duplicates.
      operationId: postRoleAssignments
      parameters:
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoleAssignmentCreateRequest'
          application/yaml:
            schema:
              $ref: '#/components/schemas/RoleAssignmentCreateRequest'
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Successfully created role assignments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTOListRoleAssignmentResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTOListRoleAssignmentResponse'
  /roles:
    get:
      tags:
      - roles
      summary: List roles in the given scope
      operationId: getRoleList
      parameters:
      - name: pageIndex
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 0
      - name: pageSize
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: integer
          format: int32
          default: 50
      - name: sortOrders
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: array
          items:
            $ref: '#/components/schemas/SortOrder'
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: searchTerm
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Paginated list of roles in the given scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTOPageResponseRoleResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTOPageResponseRoleResponse'
    post:
      tags:
      - roles
      summary: Create a Custom Role in a scope
      operationId: postRole
      parameters:
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
          application/yaml:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Created Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleResponse'
  /roles/{identifier}:
    get:
      tags:
      - roles
      summary: Get a Role by identifier
      operationId: getRole
      parameters:
      - name: identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Queried Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleResponse'
    put:
      tags:
      - roles
      summary: Update a Custom Role by identifier
      operationId: putRole
      parameters:
      - name: identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
          application/yaml:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Updated Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleResponse'
    delete:
      tags:
      - roles
      summary: Delete a Custom Role in a scope
      operationId: deleteRole
      parameters:
      - name: identifier
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      - name: accountIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: orgIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: projectIdentifier
        in: query
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Failure'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Failure'
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            application/yaml:
              schema:
                $ref: '#/components/schemas/Error'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
            application/yaml:
              schema:
                $ref: '#/components/schemas/AccessDeniedError'
        default:
          description: Deleted Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleResponse'
            application/yaml:
              schema:
                $ref: '#/components/schemas/ResponseDTORoleResponse'
  /enforcement/client/usage/{featureRestrictionName}:
    put:
      operationId: getFeatureUsage
      parameters:
      - name: featureRestrictionName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - TEST1
          - TEST2
          - TEST3
          - TEST4
          - TEST5
          - PERSPECTIVES
          - CCM_K8S_CLUSTERS
          - MULTIPLE_ORGANIZATIONS
          - MULTIPLE_PROJECTS
          - INTEGRATED_APPROVALS_WITH_HARNESS_UI
          - INTEGRATED_APPROVALS_WITH_JIRA
          - SECRET_MANAGERS
          - DEPLOYMENTS
          - SERVICES
          - BUILDS
          - SAML_SUPPORT
          - OAUTH_SUPPORT
          - LDAP_SUPPORT
          - TWO_FACTOR_AUTH_SUPPORT
          - CUSTOM_ROLES
          - CUSTOM_RESOURCE_GROUPS
          - K8S_BG_SWAP_SERVICES
          - K8S_BLUE_GREEN_DEPLOY
          - K8S_APPLY
          - K8S_DELETE
          - K8S_CANARY_DELETE
          - K8S_ROLLING_DEPLOY
          - K8S_CANARY_DEPLOY
          - K8S_SCALE
          - K8S_ROLLING_ROLLBACK
          - TERRAFORM_APPLY
          - TERRAFORM_PLAN
          - TERRAFORM_DESTROY
          - TERRAFORM_ROLLBACK
      - name: accountIdentifier
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestrictionMetadataDTO'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTOFeatureRestrictionUsageDTO'
  /enforcement/client/custom/{featureRestrictionName}:
    put:
      operationId: evaluateCustomFeatureRestriction
      parameters:
      - name: featureRestrictionName
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
          enum:
          - TEST1
          - TEST2
          - TEST3
          - TEST4
          - TEST5
          - PERSPECTIVES
          - CCM_K8S_CLUSTERS
          - MULTIPLE_ORGANIZATIONS
          - MULTIPLE_PROJECTS
          - INTEGRATED_APPROVALS_WITH_HARNESS_UI
          - INTEGRATED_APPROVALS_WITH_JIRA
          - SECRET_MANAGERS
          - DEPLOYMENTS
          - SERVICES
          - BUILDS
          - SAML_SUPPORT
          - OAUTH_SUPPORT
          - LDAP_SUPPORT
          - TWO_FACTOR_AUTH_SUPPORT
          - CUSTOM_ROLES
          - CUSTOM_RESOURCE_GROUPS
          - K8S_BG_SWAP_SERVICES
          - K8S_BLUE_GREEN_DEPLOY
          - K8S_APPLY
          - K8S_DELETE
          - K8S_CANARY_DELETE
          - K8S_ROLLING_DEPLOY
          - K8S_CANARY_DEPLOY
          - K8S_SCALE
          - K8S_ROLLING_ROLLBACK
          - TERRAFORM_APPLY
          - TERRAFORM_PLAN
          - TERRAFORM_DESTROY
          - TERRAFORM_ROLLBACK
      - name: accountIdentifier
        in: query
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRestrictionEvaluationDTO'
        required: true
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseDTOBoolean'
components:
  schemas:
    Failure:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        code:
          type: string
          enum:
          - DEFAULT_ERROR_CODE
          - INVALID_ARGUMENT
          - INVALID_EMAIL
          - DOMAIN_NOT_ALLOWED_TO_REGISTER
          - COMMNITY_EDITION_NOT_FOUND
          - DEPLOY_MODE_IS_NOT_ON_PREM
          - USER_ALREADY_REGISTERED
          - USER_INVITATION_DOES_NOT_EXIST
          - USER_DOES_NOT_EXIST
          - USER_INVITE_OPERATION_FAILED
          - USER_DISABLED
          - ACCOUNT_DOES_NOT_EXIST
          - INACTIVE_ACCOUNT
          - ACCOUNT_MIGRATED
          - USER_DOMAIN_NOT_ALLOWED
          - MAX_FAILED_ATTEMPT_COUNT_EXCEEDED
          - RESOURCE_NOT_FOUND
          - ROLE_DOES_NOT_EXIST
          - EMAIL_NOT_VERIFIED
          - EMAIL_VERIFICATION_TOKEN_NOT_FOUND
          - INVALID_TOKEN
          - REVOKED_TOKEN
          - INVALID_CAPTCHA_TOKEN
          - NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS
          - EXPIRED_TOKEN
          - TOKEN_ALREADY_REFRESHED_ONCE
          - ACCESS_DENIED
          - NG_ACCESS_DENIED
          - INVALID_CREDENTIAL
          - INVALID_CREDENTIALS_THIRD_PARTY
          - INVALID_KEY
          - INVALID_CONNECTOR_TYPE
          - INVALID_KEYPATH
          - INVALID_VARIABLE
          - UNKNOWN_HOST
          - UNREACHABLE_HOST
          - INVALID_PORT
          - SSH_SESSION_TIMEOUT
          - SOCKET_CONNECTION_ERROR
          - CONNECTION_ERROR
          - SOCKET_CONNECTION_TIMEOUT
          - CONNECTION_TIMEOUT
          - SSH_CONNECTION_ERROR
          - USER_GROUP_ERROR
          - INVALID_EXECUTION_ID
          - ERROR_IN_GETTING_CHANNEL_STREAMS
          - UNEXPECTED
          - UNKNOWN_ERROR
          - UNKNOWN_EXECUTOR_TYPE_ERROR
          - DUPLICATE_STATE_NAMES
          - TRANSITION_NOT_LINKED
          - TRANSITION_TO_INCORRECT_STATE
          - TRANSITION_TYPE_NULL
          - STATES_WITH_DUP_TRANSITIONS
          - BARRIERS_NOT_RUNNING_CONCURRENTLY
          - NON_FORK_STATES
          - NON_REPEAT_STATES
          - INITIAL_STATE_NOT_DEFINED
          - FILE_INTEGRITY_CHECK_FAILED
          - INVALID_URL
          - FILE_DOWNLOAD_FAILED
          - PLATFORM_SOFTWARE_DELETE_ERROR
          - INVALID_CSV_FILE
          - INVALID_REQUEST
          - SCHEMA_VALIDATION_FAILED
          - FILTER_CREATION_ERROR
          - INVALID_YAML_ERROR
          - PLAN_CREATION_ERROR
          - INVALID_INFRA_STATE
          - PIPELINE_ALREADY_TRIGGERED
          - NON_EXISTING_PIPELINE
          - DUPLICATE_COMMAND_NAMES
          - INVALID_PIPELINE
          - COMMAND_DOES_NOT_EXIST
          - DUPLICATE_ARTIFACTSTREAM_NAMES
          - DUPLICATE_HOST_NAMES
          - STATE_NOT_FOR_TYPE
          - STATE_MACHINE_ISSUE
          - STATE_DISCONTINUE_FAILED
          - STATE_PAUSE_FAILED
          - PAUSE_ALL_ALREADY
          - RESUME_ALL_ALREADY
          - ROLLBACK_ALREADY
          - ABORT_ALL_ALREADY
          - EXPIRE_ALL_ALREADY
          - RETRY_FAILED
          - UNKNOWN_ARTIFACT_TYPE
          - UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE
          - INIT_TIMEOUT
          - LICENSE_EXPIRED
          - NOT_LICENSED
          - REQUEST_TIMEOUT
          - WORKFLOW_ALREADY_TRIGGERED
          - JENKINS_ERROR
          - INVALID_ARTIFACT_SOURCE
          - INVALID_ARTIFACT_SERVER
          - INVALID_CLOUD_PROVIDER
          - UPDATE_NOT_ALLOWED
          - DELETE_NOT_ALLOWED
          - APPDYNAMICS_CONFIGURATION_ERROR
          - APM_CONFIGURATION_ERROR
          - SPLUNK_CONFIGURATION_ERROR
          - ELK_CONFIGURATION_ERROR
          - LOGZ_CONFIGURATION_ERROR
          - SUMO_CONFIGURATION_ERROR
          - INSTANA_CONFIGURATION_ERROR
          - APPDYNAMICS_ERROR
          - STACKDRIVER_ERROR
          - STACKDRIVER_CONFIGURATION_ERROR
          - NEWRELIC_CONFIGURATION_ERROR
          - NEWRELIC_ERROR
          - DYNA_TRACE_CONFIGURATION_ERROR
          - DYNA_TRACE_ERROR
          - CLOUDWATCH_ERROR
          - CLOUDWATCH_CONFIGURATION_ERROR
          - PROMETHEUS_CONFIGURATION_ERROR
          - DATA_DOG_CONFIGURATION_ERROR
          - SERVICE_GUARD_CONFIGURATION_ERROR
          - ENCRYPTION_NOT_CONFIGURED
          - UNAVAILABLE_DELEGATES
          - WORKFLOW_EXECUTION_IN_PROGRESS
          - PIPELINE_EXECUTION_IN_PROGRESS
          - AWS_ACCESS_DENIED
          - AWS_CLUSTER_NOT_FOUND
          - AWS_SERVICE_NOT_FOUND
          - IMAGE_NOT_FOUND
          - ILLEGAL_ARGUMENT
          - IMAGE_TAG_NOT_FOUND
          - DELEGATE_NOT_AVAILABLE
          - INVALID_YAML_PAYLOAD
          - AUTHENTICATION_ERROR
          - AUTHORIZATION_ERROR
          - UNRECOGNIZED_YAML_FIELDS
          - COULD_NOT_MAP_BEFORE_YAML
          - MISSING_BEFORE_YAML
          - MISSING_YAML
          - NON_EMPTY_DELETIONS
          - GENERAL_YAML_ERROR
          - GENERAL_YAML_INFO
          - YAML_GIT_SYNC_ERROR
          - GIT_CONNECTION_ERROR
          - GIT_ERROR
          - ARTIFACT_SERVER_ERROR
          - ENCRYPT_DECRYPT_ERROR
          - SECRET_MANAGEMENT_ERROR
          - SECRET_NOT_FOUND
          - KMS_OPERATION_ERROR
          - GCP_KMS_OPERATION_ERROR
          - VAULT_OPERATION_ERROR
          - AWS_SECRETS_MANAGER_OPERATION_ERROR
          - AZURE_KEY_VAULT_OPERATION_ERROR
          - CYBERARK_OPERATION_ERROR
          - UNSUPPORTED_OPERATION_EXCEPTION
          - FEATURE_UNAVAILABLE
          - GENERAL_ERROR
          - BASELINE_CONFIGURATION_ERROR
          - SAML_IDP_CONFIGURATION_NOT_AVAILABLE
          - INVALID_AUTHENTICATION_MECHANISM
          - INVALID_SAML_CONFIGURATION
          - INVALID_OAUTH_CONFIGURATION
          - INVALID_LDAP_CONFIGURATION
          - USER_GROUP_SYNC_FAILURE
          - USER_GROUP_ALREADY_EXIST
          - INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION
          - EXPLANATION
          - HINT
          - NOT_WHITELISTED_IP
          - INVALID_TOTP_TOKEN
          - EMAIL_FAILED
          - SSL_HANDSHAKE_FAILED
          - NO_APPS_ASSIGNED
          - INVALID_INFRA_CONFIGURATION
          - TEMPLATES_LINKED
          - USER_HAS_NO_PERMISSIONS
          - USER_NOT_AUTHORIZED
          - USER_ALREADY_PRESENT
          - INVALID_USAGE_RESTRICTION
          - USAGE_RESTRICTION_ERROR
          - STATE_EXECUTION_INSTANCE_NOT_FOUND
          - DELEGATE_TASK_RETRY
          - KUBERNETES_API_TASK_EXCEPTION
          - KUBERNETES_TASK_EXCEPTION
          - KUBERNETES_YAML_ERROR
          - SAVE_FILE_INTO_GCP_STORAGE_FAILED
          - READ_FILE_FROM_GCP_STORAGE_FAILED
          - FILE_NOT_FOUND_ERROR
          - USAGE_LIMITS_EXCEEDED
          - EVENT_PUBLISH_FAILED
          - JIRA_ERROR
          - EXPRESSION_EVALUATION_FAILED
          - KUBERNETES_VALUES_ERROR
          - KUBERNETES_CLUSTER_ERROR
          - INCORRECT_SIGN_IN_MECHANISM
          - OAUTH_LOGIN_FAILED
          - INVALID_TERRAFORM_TARGETS_REQUEST
          - TERRAFORM_EXECUTION_ERROR
          - FILE_READ_FAILED
          - FILE_SIZE_EXCEEDS_LIMIT
          - CLUSTER_NOT_FOUND
          - MARKETPLACE_TOKEN_NOT_FOUND
          - INVALID_MARKETPLACE_TOKEN
          - INVALID_TICKETING_SERVER
          - SERVICENOW_ERROR
          - PASSWORD_EXPIRED
          - USER_LOCKED
          - PASSWORD_STRENGTH_CHECK_FAILED
          - ACCOUNT_DISABLED
          - INVALID_ACCOUNT_PERMISSION
          - PAGERDUTY_ERROR
          - HEALTH_ERROR
          - SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED
          - DOMAIN_WHITELIST_FILTER_CHECK_FAILED
          - INVALID_DASHBOARD_UPDATE_REQUEST
          - DUPLICATE_FIELD
          - INVALID_AZURE_VAULT_CONFIGURATION
          - USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS
          - INVALID_ROLLBACK
          - DATA_COLLECTION_ERROR
          - SUMO_DATA_COLLECTION_ERROR
          - DEPLOYMENT_GOVERNANCE_ERROR
          - BATCH_PROCESSING_ERROR
          - GRAPHQL_ERROR
          - FILE_CREATE_ERROR
          - ILLEGAL_STATE
          - GIT_DIFF_COMMIT_NOT_IN_ORDER
          - FAILED_TO_ACQUIRE_PERSISTENT_LOCK
          - FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK
          - POD_NOT_FOUND_ERROR
          - COMMAND_EXECUTION_ERROR
          - REGISTRY_EXCEPTION
          - ENGINE_INTERRUPT_PROCESSING_EXCEPTION
          - ENGINE_IO_EXCEPTION
          - ENGINE_OUTCOME_EXCEPTION
          - ENGINE_SWEEPING_OUTPUT_EXCEPTION
          - CACHE_NOT_FOUND_EXCEPTION
          - ENGINE_ENTITY_UPDATE_EXCEPTION
          - SHELL_EXECUTION_EXCEPTION
          - TEMPLATE_NOT_FOUND
          - AZURE_SERVICE_EXCEPTION
          - AZURE_CLIENT_EXCEPTION
          - GIT_UNSEEN_REMOTE_HEAD_COMMIT
          - TIMEOUT_ENGINE_EXCEPTION
          - NO_AVAILABLE_DELEGATES
          - NO_INSTALLED_DELEGATES
          - DUPLICATE_DELEGATE_EXCEPTION
          - GCP_MARKETPLACE_EXCEPTION
          - MISSING_DEFAULT_GOOGLE_CREDENTIALS
          - INCORRECT_DEFAULT_GOOGLE_CREDENTIALS
          - OPTIMISTIC_LOCKING_EXCEPTION
          - NG_PIPELINE_EXECUTION_EXCEPTION
          - NG_PIPELINE_CREATE_EXCEPTION
          - RESOURCE_NOT_FOUND_EXCEPTION
          - PMS_INITIALIZE_SDK_EXCEPTION
          - UNEXPECTED_SNIPPET_EXCEPTION
          - UNEXPECTED_SCHEMA_EXCEPTION
          - CONNECTOR_VALIDATION_EXCEPTION
          - TIMESCALE_NOT_AVAILABLE
          - MIGRATION_EXCEPTION
          - REQUEST_PROCESSING_INTERRUPTED
          - GCP_SECRET_MANAGER_OPERATION_ERROR
          - GCP_SECRET_OPERATION_ERROR
          - GIT_OPERATION_ERROR
          - TASK_FAILURE_ERROR
          - INSTANCE_STATS_PROCESS_ERROR
          - INSTANCE_STATS_MIGRATION_ERROR
          - DEPLOYMENT_MIGRATION_ERROR
          - INSTANCE_STATS_AGGREGATION_ERROR
          - UNRESOLVED_EXPRESSIONS_ERROR
          - KRYO_HANDLER_NOT_FOUND_ERROR
          - DELEGATE_ERROR_HANDLER_EXCEPTION
          - UNEXPECTED_TYPE_ERROR
          - EXCEPTION_HANDLER_NOT_FOUND
          - CONNECTOR_NOT_FOUND_EXCEPTION
          - GCP_SERVER_ERROR
          - HTTP_RESPONSE_EXCEPTION
          - SCM_NOT_FOUND_ERROR
          - SCM_CONFLICT_ERROR
          - SCM_UNPROCESSABLE_ENTITY
          - PROCESS_EXECUTION_EXCEPTION
          - SCM_UNAUTHORIZED
          - DATA
          - CONTEXT
          - PR_CREATION_ERROR
          - URL_NOT_REACHABLE
          - URL_NOT_PROVIDED
          - ENGINE_EXPRESSION_EVALUATION_ERROR
          - ENGINE_FUNCTOR_ERROR
          - JIRA_CLIENT_ERROR
          - SCM_NOT_MODIFIED
          - JIRA_STEP_ERROR
          - BUCKET_SERVER_ERROR
          - GIT_SYNC_ERROR
          - TEMPLATE_EXCEPTION
        message:
          type: string
        correlationId:
          type: string
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
      description: This is Failure entity as defied in Harness
    ValidationError:
      type: object
      properties:
        fieldId:
          type: string
        error:
          type: string
    Error:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        code:
          type: string
          enum:
          - DEFAULT_ERROR_CODE
          - INVALID_ARGUMENT
          - INVALID_EMAIL
          - DOMAIN_NOT_ALLOWED_TO_REGISTER
          - COMMNITY_EDITION_NOT_FOUND
          - DEPLOY_MODE_IS_NOT_ON_PREM
          - USER_ALREADY_REGISTERED
          - USER_INVITATION_DOES_NOT_EXIST
          - USER_DOES_NOT_EXIST
          - USER_INVITE_OPERATION_FAILED
          - USER_DISABLED
          - ACCOUNT_DOES_NOT_EXIST
          - INACTIVE_ACCOUNT
          - ACCOUNT_MIGRATED
          - USER_DOMAIN_NOT_ALLOWED
          - MAX_FAILED_ATTEMPT_COUNT_EXCEEDED
          - RESOURCE_NOT_FOUND
          - ROLE_DOES_NOT_EXIST
          - EMAIL_NOT_VERIFIED
          - EMAIL_VERIFICATION_TOKEN_NOT_FOUND
          - INVALID_TOKEN
          - REVOKED_TOKEN
          - INVALID_CAPTCHA_TOKEN
          - NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS
          - EXPIRED_TOKEN
          - TOKEN_ALREADY_REFRESHED_ONCE
          - ACCESS_DENIED
          - NG_ACCESS_DENIED
          - INVALID_CREDENTIAL
          - INVALID_CREDENTIALS_THIRD_PARTY
          - INVALID_KEY
          - INVALID_CONNECTOR_TYPE
          - INVALID_KEYPATH
          - INVALID_VARIABLE
          - UNKNOWN_HOST
          - UNREACHABLE_HOST
          - INVALID_PORT
          - SSH_SESSION_TIMEOUT
          - SOCKET_CONNECTION_ERROR
          - CONNECTION_ERROR
          - SOCKET_CONNECTION_TIMEOUT
          - CONNECTION_TIMEOUT
          - SSH_CONNECTION_ERROR
          - USER_GROUP_ERROR
          - INVALID_EXECUTION_ID
          - ERROR_IN_GETTING_CHANNEL_STREAMS
          - UNEXPECTED
          - UNKNOWN_ERROR
          - UNKNOWN_EXECUTOR_TYPE_ERROR
          - DUPLICATE_STATE_NAMES
          - TRANSITION_NOT_LINKED
          - TRANSITION_TO_INCORRECT_STATE
          - TRANSITION_TYPE_NULL
          - STATES_WITH_DUP_TRANSITIONS
          - BARRIERS_NOT_RUNNING_CONCURRENTLY
          - NON_FORK_STATES
          - NON_REPEAT_STATES
          - INITIAL_STATE_NOT_DEFINED
          - FILE_INTEGRITY_CHECK_FAILED
          - INVALID_URL
          - FILE_DOWNLOAD_FAILED
          - PLATFORM_SOFTWARE_DELETE_ERROR
          - INVALID_CSV_FILE
          - INVALID_REQUEST
          - SCHEMA_VALIDATION_FAILED
          - FILTER_CREATION_ERROR
          - INVALID_YAML_ERROR
          - PLAN_CREATION_ERROR
          - INVALID_INFRA_STATE
          - PIPELINE_ALREADY_TRIGGERED
          - NON_EXISTING_PIPELINE
          - DUPLICATE_COMMAND_NAMES
          - INVALID_PIPELINE
          - COMMAND_DOES_NOT_EXIST
          - DUPLICATE_ARTIFACTSTREAM_NAMES
          - DUPLICATE_HOST_NAMES
          - STATE_NOT_FOR_TYPE
          - STATE_MACHINE_ISSUE
          - STATE_DISCONTINUE_FAILED
          - STATE_PAUSE_FAILED
          - PAUSE_ALL_ALREADY
          - RESUME_ALL_ALREADY
          - ROLLBACK_ALREADY
          - ABORT_ALL_ALREADY
          - EXPIRE_ALL_ALREADY
          - RETRY_FAILED
          - UNKNOWN_ARTIFACT_TYPE
          - UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE
          - INIT_TIMEOUT
          - LICENSE_EXPIRED
          - NOT_LICENSED
          - REQUEST_TIMEOUT
          - WORKFLOW_ALREADY_TRIGGERED
          - JENKINS_ERROR
          - INVALID_ARTIFACT_SOURCE
          - INVALID_ARTIFACT_SERVER
          - INVALID_CLOUD_PROVIDER
          - UPDATE_NOT_ALLOWED
          - DELETE_NOT_ALLOWED
          - APPDYNAMICS_CONFIGURATION_ERROR
          - APM_CONFIGURATION_ERROR
          - SPLUNK_CONFIGURATION_ERROR
          - ELK_CONFIGURATION_ERROR
          - LOGZ_CONFIGURATION_ERROR
          - SUMO_CONFIGURATION_ERROR
          - INSTANA_CONFIGURATION_ERROR
          - APPDYNAMICS_ERROR
          - STACKDRIVER_ERROR
          - STACKDRIVER_CONFIGURATION_ERROR
          - NEWRELIC_CONFIGURATION_ERROR
          - NEWRELIC_ERROR
          - DYNA_TRACE_CONFIGURATION_ERROR
          - DYNA_TRACE_ERROR
          - CLOUDWATCH_ERROR
          - CLOUDWATCH_CONFIGURATION_ERROR
          - PROMETHEUS_CONFIGURATION_ERROR
          - DATA_DOG_CONFIGURATION_ERROR
          - SERVICE_GUARD_CONFIGURATION_ERROR
          - ENCRYPTION_NOT_CONFIGURED
          - UNAVAILABLE_DELEGATES
          - WORKFLOW_EXECUTION_IN_PROGRESS
          - PIPELINE_EXECUTION_IN_PROGRESS
          - AWS_ACCESS_DENIED
          - AWS_CLUSTER_NOT_FOUND
          - AWS_SERVICE_NOT_FOUND
          - IMAGE_NOT_FOUND
          - ILLEGAL_ARGUMENT
          - IMAGE_TAG_NOT_FOUND
          - DELEGATE_NOT_AVAILABLE
          - INVALID_YAML_PAYLOAD
          - AUTHENTICATION_ERROR
          - AUTHORIZATION_ERROR
          - UNRECOGNIZED_YAML_FIELDS
          - COULD_NOT_MAP_BEFORE_YAML
          - MISSING_BEFORE_YAML
          - MISSING_YAML
          - NON_EMPTY_DELETIONS
          - GENERAL_YAML_ERROR
          - GENERAL_YAML_INFO
          - YAML_GIT_SYNC_ERROR
          - GIT_CONNECTION_ERROR
          - GIT_ERROR
          - ARTIFACT_SERVER_ERROR
          - ENCRYPT_DECRYPT_ERROR
          - SECRET_MANAGEMENT_ERROR
          - SECRET_NOT_FOUND
          - KMS_OPERATION_ERROR
          - GCP_KMS_OPERATION_ERROR
          - VAULT_OPERATION_ERROR
          - AWS_SECRETS_MANAGER_OPERATION_ERROR
          - AZURE_KEY_VAULT_OPERATION_ERROR
          - CYBERARK_OPERATION_ERROR
          - UNSUPPORTED_OPERATION_EXCEPTION
          - FEATURE_UNAVAILABLE
          - GENERAL_ERROR
          - BASELINE_CONFIGURATION_ERROR
          - SAML_IDP_CONFIGURATION_NOT_AVAILABLE
          - INVALID_AUTHENTICATION_MECHANISM
          - INVALID_SAML_CONFIGURATION
          - INVALID_OAUTH_CONFIGURATION
          - INVALID_LDAP_CONFIGURATION
          - USER_GROUP_SYNC_FAILURE
          - USER_GROUP_ALREADY_EXIST
          - INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION
          - EXPLANATION
          - HINT
          - NOT_WHITELISTED_IP
          - INVALID_TOTP_TOKEN
          - EMAIL_FAILED
          - SSL_HANDSHAKE_FAILED
          - NO_APPS_ASSIGNED
          - INVALID_INFRA_CONFIGURATION
          - TEMPLATES_LINKED
          - USER_HAS_NO_PERMISSIONS
          - USER_NOT_AUTHORIZED
          - USER_ALREADY_PRESENT
          - INVALID_USAGE_RESTRICTION
          - USAGE_RESTRICTION_ERROR
          - STATE_EXECUTION_INSTANCE_NOT_FOUND
          - DELEGATE_TASK_RETRY
          - KUBERNETES_API_TASK_EXCEPTION
          - KUBERNETES_TASK_EXCEPTION
          - KUBERNETES_YAML_ERROR
          - SAVE_FILE_INTO_GCP_STORAGE_FAILED
          - READ_FILE_FROM_GCP_STORAGE_FAILED
          - FILE_NOT_FOUND_ERROR
          - USAGE_LIMITS_EXCEEDED
          - EVENT_PUBLISH_FAILED
          - JIRA_ERROR
          - EXPRESSION_EVALUATION_FAILED
          - KUBERNETES_VALUES_ERROR
          - KUBERNETES_CLUSTER_ERROR
          - INCORRECT_SIGN_IN_MECHANISM
          - OAUTH_LOGIN_FAILED
          - INVALID_TERRAFORM_TARGETS_REQUEST
          - TERRAFORM_EXECUTION_ERROR
          - FILE_READ_FAILED
          - FILE_SIZE_EXCEEDS_LIMIT
          - CLUSTER_NOT_FOUND
          - MARKETPLACE_TOKEN_NOT_FOUND
          - INVALID_MARKETPLACE_TOKEN
          - INVALID_TICKETING_SERVER
          - SERVICENOW_ERROR
          - PASSWORD_EXPIRED
          - USER_LOCKED
          - PASSWORD_STRENGTH_CHECK_FAILED
          - ACCOUNT_DISABLED
          - INVALID_ACCOUNT_PERMISSION
          - PAGERDUTY_ERROR
          - HEALTH_ERROR
          - SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED
          - DOMAIN_WHITELIST_FILTER_CHECK_FAILED
          - INVALID_DASHBOARD_UPDATE_REQUEST
          - DUPLICATE_FIELD
          - INVALID_AZURE_VAULT_CONFIGURATION
          - USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS
          - INVALID_ROLLBACK
          - DATA_COLLECTION_ERROR
          - SUMO_DATA_COLLECTION_ERROR
          - DEPLOYMENT_GOVERNANCE_ERROR
          - BATCH_PROCESSING_ERROR
          - GRAPHQL_ERROR
          - FILE_CREATE_ERROR
          - ILLEGAL_STATE
          - GIT_DIFF_COMMIT_NOT_IN_ORDER
          - FAILED_TO_ACQUIRE_PERSISTENT_LOCK
          - FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK
          - POD_NOT_FOUND_ERROR
          - COMMAND_EXECUTION_ERROR
          - REGISTRY_EXCEPTION
          - ENGINE_INTERRUPT_PROCESSING_EXCEPTION
          - ENGINE_IO_EXCEPTION
          - ENGINE_OUTCOME_EXCEPTION
          - ENGINE_SWEEPING_OUTPUT_EXCEPTION
          - CACHE_NOT_FOUND_EXCEPTION
          - ENGINE_ENTITY_UPDATE_EXCEPTION
          - SHELL_EXECUTION_EXCEPTION
          - TEMPLATE_NOT_FOUND
          - AZURE_SERVICE_EXCEPTION
          - AZURE_CLIENT_EXCEPTION
          - GIT_UNSEEN_REMOTE_HEAD_COMMIT
          - TIMEOUT_ENGINE_EXCEPTION
          - NO_AVAILABLE_DELEGATES
          - NO_INSTALLED_DELEGATES
          - DUPLICATE_DELEGATE_EXCEPTION
          - GCP_MARKETPLACE_EXCEPTION
          - MISSING_DEFAULT_GOOGLE_CREDENTIALS
          - INCORRECT_DEFAULT_GOOGLE_CREDENTIALS
          - OPTIMISTIC_LOCKING_EXCEPTION
          - NG_PIPELINE_EXECUTION_EXCEPTION
          - NG_PIPELINE_CREATE_EXCEPTION
          - RESOURCE_NOT_FOUND_EXCEPTION
          - PMS_INITIALIZE_SDK_EXCEPTION
          - UNEXPECTED_SNIPPET_EXCEPTION
          - UNEXPECTED_SCHEMA_EXCEPTION
          - CONNECTOR_VALIDATION_EXCEPTION
          - TIMESCALE_NOT_AVAILABLE
          - MIGRATION_EXCEPTION
          - REQUEST_PROCESSING_INTERRUPTED
          - GCP_SECRET_MANAGER_OPERATION_ERROR
          - GCP_SECRET_OPERATION_ERROR
          - GIT_OPERATION_ERROR
          - TASK_FAILURE_ERROR
          - INSTANCE_STATS_PROCESS_ERROR
          - INSTANCE_STATS_MIGRATION_ERROR
          - DEPLOYMENT_MIGRATION_ERROR
          - INSTANCE_STATS_AGGREGATION_ERROR
          - UNRESOLVED_EXPRESSIONS_ERROR
          - KRYO_HANDLER_NOT_FOUND_ERROR
          - DELEGATE_ERROR_HANDLER_EXCEPTION
          - UNEXPECTED_TYPE_ERROR
          - EXCEPTION_HANDLER_NOT_FOUND
          - CONNECTOR_NOT_FOUND_EXCEPTION
          - GCP_SERVER_ERROR
          - HTTP_RESPONSE_EXCEPTION
          - SCM_NOT_FOUND_ERROR
          - SCM_CONFLICT_ERROR
          - SCM_UNPROCESSABLE_ENTITY
          - PROCESS_EXECUTION_EXCEPTION
          - SCM_UNAUTHORIZED
          - DATA
          - CONTEXT
          - PR_CREATION_ERROR
          - URL_NOT_REACHABLE
          - URL_NOT_PROVIDED
          - ENGINE_EXPRESSION_EVALUATION_ERROR
          - ENGINE_FUNCTOR_ERROR
          - JIRA_CLIENT_ERROR
          - SCM_NOT_MODIFIED
          - JIRA_STEP_ERROR
          - BUCKET_SERVER_ERROR
          - GIT_SYNC_ERROR
          - TEMPLATE_EXCEPTION
        message:
          type: string
        correlationId:
          type: string
        detailedMessage:
          type: string
        responseMessages:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        metadata:
          $ref: '#/components/schemas/ErrorMetadataDTO'
      description: This is Error entity as defined in Harness
    ErrorMetadataDTO:
      type: object
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
    ResponseMessage:
      type: object
      properties:
        code:
          type: string
          enum:
          - DEFAULT_ERROR_CODE
          - INVALID_ARGUMENT
          - INVALID_EMAIL
          - DOMAIN_NOT_ALLOWED_TO_REGISTER
          - COMMNITY_EDITION_NOT_FOUND
          - DEPLOY_MODE_IS_NOT_ON_PREM
          - USER_ALREADY_REGISTERED
          - USER_INVITATION_DOES_NOT_EXIST
          - USER_DOES_NOT_EXIST
          - USER_INVITE_OPERATION_FAILED
          - USER_DISABLED
          - ACCOUNT_DOES_NOT_EXIST
          - INACTIVE_ACCOUNT
          - ACCOUNT_MIGRATED
          - USER_DOMAIN_NOT_ALLOWED
          - MAX_FAILED_ATTEMPT_COUNT_EXCEEDED
          - RESOURCE_NOT_FOUND
          - ROLE_DOES_NOT_EXIST
          - EMAIL_NOT_VERIFIED
          - EMAIL_VERIFICATION_TOKEN_NOT_FOUND
          - INVALID_TOKEN
          - REVOKED_TOKEN
          - INVALID_CAPTCHA_TOKEN
          - NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS
          - EXPIRED_TOKEN
          - TOKEN_ALREADY_REFRESHED_ONCE
          - ACCESS_DENIED
          - NG_ACCESS_DENIED
          - INVALID_CREDENTIAL
          - INVALID_CREDENTIALS_THIRD_PARTY
          - INVALID_KEY
          - INVALID_CONNECTOR_TYPE
          - INVALID_KEYPATH
          - INVALID_VARIABLE
          - UNKNOWN_HOST
          - UNREACHABLE_HOST
          - INVALID_PORT
          - SSH_SESSION_TIMEOUT
          - SOCKET_CONNECTION_ERROR
          - CONNECTION_ERROR
          - SOCKET_CONNECTION_TIMEOUT
          - CONNECTION_TIMEOUT
          - SSH_CONNECTION_ERROR
          - USER_GROUP_ERROR
          - INVALID_EXECUTION_ID
          - ERROR_IN_GETTING_CHANNEL_STREAMS
          - UNEXPECTED
          - UNKNOWN_ERROR
          - UNKNOWN_EXECUTOR_TYPE_ERROR
          - DUPLICATE_STATE_NAMES
          - TRANSITION_NOT_LINKED
          - TRANSITION_TO_INCORRECT_STATE
          - TRANSITION_TYPE_NULL
          - STATES_WITH_DUP_TRANSITIONS
          - BARRIERS_NOT_RUNNING_CONCURRENTLY
          - NON_FORK_STATES
          - NON_REPEAT_STATES
          - INITIAL_STATE_NOT_DEFINED
          - FILE_INTEGRITY_CHECK_FAILED
          - INVALID_URL
          - FILE_DOWNLOAD_FAILED
          - PLATFORM_SOFTWARE_DELETE_ERROR
          - INVALID_CSV_FILE
          - INVALID_REQUEST
          - SCHEMA_VALIDATION_FAILED
          - FILTER_CREATION_ERROR
          - INVALID_YAML_ERROR
          - PLAN_CREATION_ERROR
          - INVALID_INFRA_STATE
          - PIPELINE_ALREADY_TRIGGERED
          - NON_EXISTING_PIPELINE
          - DUPLICATE_COMMAND_NAMES
          - INVALID_PIPELINE
          - COMMAND_DOES_NOT_EXIST
          - DUPLICATE_ARTIFACTSTREAM_NAMES
          - DUPLICATE_HOST_NAMES
          - STATE_NOT_FOR_TYPE
          - STATE_MACHINE_ISSUE
          - STATE_DISCONTINUE_FAILED
          - STATE_PAUSE_FAILED
          - PAUSE_ALL_ALREADY
          - RESUME_ALL_ALREADY
          - ROLLBACK_ALREADY
          - ABORT_ALL_ALREADY
          - EXPIRE_ALL_ALREADY
          - RETRY_FAILED
          - UNKNOWN_ARTIFACT_TYPE
          - UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE
          - INIT_TIMEOUT
          - LICENSE_EXPIRED
          - NOT_LICENSED
          - REQUEST_TIMEOUT
          - WORKFLOW_ALREADY_TRIGGERED
          - JENKINS_ERROR
          - INVALID_ARTIFACT_SOURCE
          - INVALID_ARTIFACT_SERVER
          - INVALID_CLOUD_PROVIDER
          - UPDATE_NOT_ALLOWED
          - DELETE_NOT_ALLOWED
          - APPDYNAMICS_CONFIGURATION_ERROR
          - APM_CONFIGURATION_ERROR
          - SPLUNK_CONFIGURATION_ERROR
          - ELK_CONFIGURATION_ERROR
          - LOGZ_CONFIGURATION_ERROR
          - SUMO_CONFIGURATION_ERROR
          - INSTANA_CONFIGURATION_ERROR
          - APPDYNAMICS_ERROR
          - STACKDRIVER_ERROR
          - STACKDRIVER_CONFIGURATION_ERROR
          - NEWRELIC_CONFIGURATION_ERROR
          - NEWRELIC_ERROR
          - DYNA_TRACE_CONFIGURATION_ERROR
          - DYNA_TRACE_ERROR
          - CLOUDWATCH_ERROR
          - CLOUDWATCH_CONFIGURATION_ERROR
          - PROMETHEUS_CONFIGURATION_ERROR
          - DATA_DOG_CONFIGURATION_ERROR
          - SERVICE_GUARD_CONFIGURATION_ERROR
          - ENCRYPTION_NOT_CONFIGURED
          - UNAVAILABLE_DELEGATES
          - WORKFLOW_EXECUTION_IN_PROGRESS
          - PIPELINE_EXECUTION_IN_PROGRESS
          - AWS_ACCESS_DENIED
          - AWS_CLUSTER_NOT_FOUND
          - AWS_SERVICE_NOT_FOUND
          - IMAGE_NOT_FOUND
          - ILLEGAL_ARGUMENT
          - IMAGE_TAG_NOT_FOUND
          - DELEGATE_NOT_AVAILABLE
          - INVALID_YAML_PAYLOAD
          - AUTHENTICATION_ERROR
          - AUTHORIZATION_ERROR
          - UNRECOGNIZED_YAML_FIELDS
          - COULD_NOT_MAP_BEFORE_YAML
          - MISSING_BEFORE_YAML
          - MISSING_YAML
          - NON_EMPTY_DELETIONS
          - GENERAL_YAML_ERROR
          - GENERAL_YAML_INFO
          - YAML_GIT_SYNC_ERROR
          - GIT_CONNECTION_ERROR
          - GIT_ERROR
          - ARTIFACT_SERVER_ERROR
          - ENCRYPT_DECRYPT_ERROR
          - SECRET_MANAGEMENT_ERROR
          - SECRET_NOT_FOUND
          - KMS_OPERATION_ERROR
          - GCP_KMS_OPERATION_ERROR
          - VAULT_OPERATION_ERROR
          - AWS_SECRETS_MANAGER_OPERATION_ERROR
          - AZURE_KEY_VAULT_OPERATION_ERROR
          - CYBERARK_OPERATION_ERROR
          - UNSUPPORTED_OPERATION_EXCEPTION
          - FEATURE_UNAVAILABLE
          - GENERAL_ERROR
          - BASELINE_CONFIGURATION_ERROR
          - SAML_IDP_CONFIGURATION_NOT_AVAILABLE
          - INVALID_AUTHENTICATION_MECHANISM
          - INVALID_SAML_CONFIGURATION
          - INVALID_OAUTH_CONFIGURATION
          - INVALID_LDAP_CONFIGURATION
          - USER_GROUP_SYNC_FAILURE
          - USER_GROUP_ALREADY_EXIST
          - INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION
          - EXPLANATION
          - HINT
          - NOT_WHITELISTED_IP
          - INVALID_TOTP_TOKEN
          - EMAIL_FAILED
          - SSL_HANDSHAKE_FAILED
          - NO_APPS_ASSIGNED
          - INVALID_INFRA_CONFIGURATION
          - TEMPLATES_LINKED
          - USER_HAS_NO_PERMISSIONS
          - USER_NOT_AUTHORIZED
          - USER_ALREADY_PRESENT
          - INVALID_USAGE_RESTRICTION
          - USAGE_RESTRICTION_ERROR
          - STATE_EXECUTION_INSTANCE_NOT_FOUND
          - DELEGATE_TASK_RETRY
          - KUBERNETES_API_TASK_EXCEPTION
          - KUBERNETES_TASK_EXCEPTION
          - KUBERNETES_YAML_ERROR
          - SAVE_FILE_INTO_GCP_STORAGE_FAILED
          - READ_FILE_FROM_GCP_STORAGE_FAILED
          - FILE_NOT_FOUND_ERROR
          - USAGE_LIMITS_EXCEEDED
          - EVENT_PUBLISH_FAILED
          - JIRA_ERROR
          - EXPRESSION_EVALUATION_FAILED
          - KUBERNETES_VALUES_ERROR
          - KUBERNETES_CLUSTER_ERROR
          - INCORRECT_SIGN_IN_MECHANISM
          - OAUTH_LOGIN_FAILED
          - INVALID_TERRAFORM_TARGETS_REQUEST
          - TERRAFORM_EXECUTION_ERROR
          - FILE_READ_FAILED
          - FILE_SIZE_EXCEEDS_LIMIT
          - CLUSTER_NOT_FOUND
          - MARKETPLACE_TOKEN_NOT_FOUND
          - INVALID_MARKETPLACE_TOKEN
          - INVALID_TICKETING_SERVER
          - SERVICENOW_ERROR
          - PASSWORD_EXPIRED
          - USER_LOCKED
          - PASSWORD_STRENGTH_CHECK_FAILED
          - ACCOUNT_DISABLED
          - INVALID_ACCOUNT_PERMISSION
          - PAGERDUTY_ERROR
          - HEALTH_ERROR
          - SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED
          - DOMAIN_WHITELIST_FILTER_CHECK_FAILED
          - INVALID_DASHBOARD_UPDATE_REQUEST
          - DUPLICATE_FIELD
          - INVALID_AZURE_VAULT_CONFIGURATION
          - USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS
          - INVALID_ROLLBACK
          - DATA_COLLECTION_ERROR
          - SUMO_DATA_COLLECTION_ERROR
          - DEPLOYMENT_GOVERNANCE_ERROR
          - BATCH_PROCESSING_ERROR
          - GRAPHQL_ERROR
          - FILE_CREATE_ERROR
          - ILLEGAL_STATE
          - GIT_DIFF_COMMIT_NOT_IN_ORDER
          - FAILED_TO_ACQUIRE_PERSISTENT_LOCK
          - FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK
          - POD_NOT_FOUND_ERROR
          - COMMAND_EXECUTION_ERROR
          - REGISTRY_EXCEPTION
          - ENGINE_INTERRUPT_PROCESSING_EXCEPTION
          - ENGINE_IO_EXCEPTION
          - ENGINE_OUTCOME_EXCEPTION
          - ENGINE_SWEEPING_OUTPUT_EXCEPTION
          - CACHE_NOT_FOUND_EXCEPTION
          - ENGINE_ENTITY_UPDATE_EXCEPTION
          - SHELL_EXECUTION_EXCEPTION
          - TEMPLATE_NOT_FOUND
          - AZURE_SERVICE_EXCEPTION
          - AZURE_CLIENT_EXCEPTION
          - GIT_UNSEEN_REMOTE_HEAD_COMMIT
          - TIMEOUT_ENGINE_EXCEPTION
          - NO_AVAILABLE_DELEGATES
          - NO_INSTALLED_DELEGATES
          - DUPLICATE_DELEGATE_EXCEPTION
          - GCP_MARKETPLACE_EXCEPTION
          - MISSING_DEFAULT_GOOGLE_CREDENTIALS
          - INCORRECT_DEFAULT_GOOGLE_CREDENTIALS
          - OPTIMISTIC_LOCKING_EXCEPTION
          - NG_PIPELINE_EXECUTION_EXCEPTION
          - NG_PIPELINE_CREATE_EXCEPTION
          - RESOURCE_NOT_FOUND_EXCEPTION
          - PMS_INITIALIZE_SDK_EXCEPTION
          - UNEXPECTED_SNIPPET_EXCEPTION
          - UNEXPECTED_SCHEMA_EXCEPTION
          - CONNECTOR_VALIDATION_EXCEPTION
          - TIMESCALE_NOT_AVAILABLE
          - MIGRATION_EXCEPTION
          - REQUEST_PROCESSING_INTERRUPTED
          - GCP_SECRET_MANAGER_OPERATION_ERROR
          - GCP_SECRET_OPERATION_ERROR
          - GIT_OPERATION_ERROR
          - TASK_FAILURE_ERROR
          - INSTANCE_STATS_PROCESS_ERROR
          - INSTANCE_STATS_MIGRATION_ERROR
          - DEPLOYMENT_MIGRATION_ERROR
          - INSTANCE_STATS_AGGREGATION_ERROR
          - UNRESOLVED_EXPRESSIONS_ERROR
          - KRYO_HANDLER_NOT_FOUND_ERROR
          - DELEGATE_ERROR_HANDLER_EXCEPTION
          - UNEXPECTED_TYPE_ERROR
          - EXCEPTION_HANDLER_NOT_FOUND
          - CONNECTOR_NOT_FOUND_EXCEPTION
          - GCP_SERVER_ERROR
          - HTTP_RESPONSE_EXCEPTION
          - SCM_NOT_FOUND_ERROR
          - SCM_CONFLICT_ERROR
          - SCM_UNPROCESSABLE_ENTITY
          - PROCESS_EXECUTION_EXCEPTION
          - SCM_UNAUTHORIZED
          - DATA
          - CONTEXT
          - PR_CREATION_ERROR
          - URL_NOT_REACHABLE
          - URL_NOT_PROVIDED
          - ENGINE_EXPRESSION_EVALUATION_ERROR
          - ENGINE_FUNCTOR_ERROR
          - JIRA_CLIENT_ERROR
          - SCM_NOT_MODIFIED
          - JIRA_STEP_ERROR
          - BUCKET_SERVER_ERROR
          - GIT_SYNC_ERROR
          - TEMPLATE_EXCEPTION
        level:
          type: string
          enum:
          - INFO
          - ERROR
        message:
          type: string
        exception:
          $ref: '#/components/schemas/ResponseMessage_exception'
        failureTypes:
          type: array
          items:
            type: string
            enum:
            - EXPIRED
            - DELEGATE_PROVISIONING
            - CONNECTIVITY
            - AUTHENTICATION
            - VERIFICATION_FAILURE
            - APPLICATION_ERROR
            - AUTHORIZATION_ERROR
            - TIMEOUT_ERROR
    SampleErrorMetadataDTO:
      type: object
      allOf:
      - $ref: '#/components/schemas/ErrorMetadataDTO'
      - type: object
        properties:
          sampleMap:
            type: object
            additionalProperties:
              type: string
    AccessCheckResponse:
      type: object
      properties:
        principal:
          $ref: '#/components/schemas/Principal'
        accessControlList:
          type: array
          items:
            $ref: '#/components/schemas/AccessControl'
      example:
        principal:
          identifier: identifier
          type: USER
        accessControlList:
        - resourceScope:
            orgIdentifier: orgIdentifier
            accountIdentifier: accountIdentifier
            projectIdentifier: projectIdentifier
          resourceIdentifier: resourceIdentifier
          permitted: true
          permission: permission
          resourceType: resourceType
        - resourceScope:
            orgIdentifier: orgIdentifier
            accountIdentifier: accountIdentifier
            projectIdentifier: projectIdentifier
          resourceIdentifier: resourceIdentifier
          permitted: true
          permission: permission
          resourceType: resourceType
    AccessControl:
      type: object
      properties:
        permission:
          type: string
        resourceScope:
          $ref: '#/components/schemas/ResourceScope'
        resourceType:
          type: string
        resourceIdentifier:
          type: string
        permitted:
          type: boolean
      example:
        resourceScope:
          orgIdentifier: orgIdentifier
          accountIdentifier: accountIdentifier
          projectIdentifier: projectIdentifier
        resourceIdentifier: resourceIdentifier
        permitted: true
        permission: permission
        resourceType: resourceType
    Principal:
      type: object
      properties:
        identifier:
          type: string
        type:
          type: string
          enum:
          - USER
          - USER_GROUP
          - SERVICE
          - API_KEY
          - SERVICE_ACCOUNT
      example:
        identifier: identifier
        type: USER
    ResourceScope:
      type: object
      properties:
        accountIdentifier:
          type: string
        orgIdentifier:
          type: string
        projectIdentifier:
          type: string
      example:
        orgIdentifier: orgIdentifier
        accountIdentifier: accountIdentifier
        projectIdentifier: projectIdentifier
    ResponseDTOAccessCheckResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        data:
          $ref: '#/components/schemas/AccessCheckResponse'
        metaData:
          type: object
        correlationId:
          type: string
      example:
        metaData: {}
        data:
          principal:
            identifier: identifier
            type: USER
          accessControlList:
          - resourceScope:
              orgIdentifier: orgIdentifier
              accountIdentifier: accountIdentifier
              projectIdentifier: projectIdentifier
            resourceIdentifier: resourceIdentifier
            permitted: true
            permission: permission
            resourceType: resourceType
          - resourceScope:
              orgIdentifier: orgIdentifier
              accountIdentifier: accountIdentifier
              projectIdentifier: projectIdentifier
            resourceIdentifier: resourceIdentifier
            permitted: true
            permission: permission
            resourceType: resourceType
        correlationId: correlationId
        status: SUCCESS
    AccessCheckRequest:
      type: object
      properties:
        permissions:
          maxItems: 1000
          minItems: 0
          type: array
          items:
            $ref: '#/components/schemas/PermissionCheck'
        principal:
          $ref: '#/components/schemas/Principal'
    PermissionCheck:
      type: object
      properties:
        resourceScope:
          $ref: '#/components/schemas/ResourceScope'
        resourceType:
          type: string
        resourceIdentifier:
          type: string
        permission:
          type: string
    ResponseDTOSetString:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        data:
          uniqueItems: true
          type: array
          items:
            type: string
        metaData:
          type: object
        correlationId:
          type: string
      example:
        metaData: {}
        data:
        - data
        - data
        correlationId: correlationId
        status: SUCCESS
    Permission:
      type: object
      properties:
        identifier:
          type: string
        name:
          type: string
        status:
          type: string
          enum:
          - STAGING
          - EXPERIMENTAL
          - ACTIVE
          - DEPRECATED
          - INACTIVE
        includeInAllRoles:
          type: boolean
        allowedScopeLevels:
          uniqueItems: true
          type: array
          items:
            type: string
        resourceType:
          type: string
        action:
          type: string
      example:
        identifier: identifier
        includeInAllRoles: true
        name: name
        action: action
        status: STAGING
        allowedScopeLevels:
        - allowedScopeLevels
        - allowedScopeLevels
        resourceType: resourceType
    PermissionResponse:
      type: object
      properties:
        permission:
          $ref: '#/components/schemas/Permission'
      example:
        permission:
          identifier: identifier
          includeInAllRoles: true
          name: name
          action: action
          status: STAGING
          allowedScopeLevels:
          - allowedScopeLevels
          - allowedScopeLevels
          resourceType: resourceType
    ResponseDTOListPermissionResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        data:
          type: array
          items:
            $ref: '#/components/schemas/PermissionResponse'
        metaData:
          type: object
        correlationId:
          type: string
      example:
        metaData: {}
        data:
        - permission:
            identifier: identifier
            includeInAllRoles: true
            name: name
            action: action
            status: STAGING
            allowedScopeLevels:
            - allowedScopeLevels
            - allowedScopeLevels
            resourceType: resourceType
        - permission:
            identifier: identifier
            includeInAllRoles: true
            name: name
            action: action
            status: STAGING
            allowedScopeLevels:
            - allowedScopeLevels
            - allowedScopeLevels
            resourceType: resourceType
        correlationId: correlationId
        status: SUCCESS
    AccessDeniedError:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        code:
          type: string
          enum:
          - DEFAULT_ERROR_CODE
          - INVALID_ARGUMENT
          - INVALID_EMAIL
          - DOMAIN_NOT_ALLOWED_TO_REGISTER
          - COMMNITY_EDITION_NOT_FOUND
          - DEPLOY_MODE_IS_NOT_ON_PREM
          - USER_ALREADY_REGISTERED
          - USER_INVITATION_DOES_NOT_EXIST
          - USER_DOES_NOT_EXIST
          - USER_INVITE_OPERATION_FAILED
          - USER_DISABLED
          - ACCOUNT_DOES_NOT_EXIST
          - INACTIVE_ACCOUNT
          - ACCOUNT_MIGRATED
          - USER_DOMAIN_NOT_ALLOWED
          - MAX_FAILED_ATTEMPT_COUNT_EXCEEDED
          - RESOURCE_NOT_FOUND
          - ROLE_DOES_NOT_EXIST
          - EMAIL_NOT_VERIFIED
          - EMAIL_VERIFICATION_TOKEN_NOT_FOUND
          - INVALID_TOKEN
          - REVOKED_TOKEN
          - INVALID_CAPTCHA_TOKEN
          - NOT_ACCOUNT_MGR_NOR_HAS_ALL_APP_ACCESS
          - EXPIRED_TOKEN
          - TOKEN_ALREADY_REFRESHED_ONCE
          - ACCESS_DENIED
          - NG_ACCESS_DENIED
          - INVALID_CREDENTIAL
          - INVALID_CREDENTIALS_THIRD_PARTY
          - INVALID_KEY
          - INVALID_CONNECTOR_TYPE
          - INVALID_KEYPATH
          - INVALID_VARIABLE
          - UNKNOWN_HOST
          - UNREACHABLE_HOST
          - INVALID_PORT
          - SSH_SESSION_TIMEOUT
          - SOCKET_CONNECTION_ERROR
          - CONNECTION_ERROR
          - SOCKET_CONNECTION_TIMEOUT
          - CONNECTION_TIMEOUT
          - SSH_CONNECTION_ERROR
          - USER_GROUP_ERROR
          - INVALID_EXECUTION_ID
          - ERROR_IN_GETTING_CHANNEL_STREAMS
          - UNEXPECTED
          - UNKNOWN_ERROR
          - UNKNOWN_EXECUTOR_TYPE_ERROR
          - DUPLICATE_STATE_NAMES
          - TRANSITION_NOT_LINKED
          - TRANSITION_TO_INCORRECT_STATE
          - TRANSITION_TYPE_NULL
          - STATES_WITH_DUP_TRANSITIONS
          - BARRIERS_NOT_RUNNING_CONCURRENTLY
          - NON_FORK_STATES
          - NON_REPEAT_STATES
          - INITIAL_STATE_NOT_DEFINED
          - FILE_INTEGRITY_CHECK_FAILED
          - INVALID_URL
          - FILE_DOWNLOAD_FAILED
          - PLATFORM_SOFTWARE_DELETE_ERROR
          - INVALID_CSV_FILE
          - INVALID_REQUEST
          - SCHEMA_VALIDATION_FAILED
          - FILTER_CREATION_ERROR
          - INVALID_YAML_ERROR
          - PLAN_CREATION_ERROR
          - INVALID_INFRA_STATE
          - PIPELINE_ALREADY_TRIGGERED
          - NON_EXISTING_PIPELINE
          - DUPLICATE_COMMAND_NAMES
          - INVALID_PIPELINE
          - COMMAND_DOES_NOT_EXIST
          - DUPLICATE_ARTIFACTSTREAM_NAMES
          - DUPLICATE_HOST_NAMES
          - STATE_NOT_FOR_TYPE
          - STATE_MACHINE_ISSUE
          - STATE_DISCONTINUE_FAILED
          - STATE_PAUSE_FAILED
          - PAUSE_ALL_ALREADY
          - RESUME_ALL_ALREADY
          - ROLLBACK_ALREADY
          - ABORT_ALL_ALREADY
          - EXPIRE_ALL_ALREADY
          - RETRY_FAILED
          - UNKNOWN_ARTIFACT_TYPE
          - UNKNOWN_STAGE_ELEMENT_WRAPPER_TYPE
          - INIT_TIMEOUT
          - LICENSE_EXPIRED
          - NOT_LICENSED
          - REQUEST_TIMEOUT
          - WORKFLOW_ALREADY_TRIGGERED
          - JENKINS_ERROR
          - INVALID_ARTIFACT_SOURCE
          - INVALID_ARTIFACT_SERVER
          - INVALID_CLOUD_PROVIDER
          - UPDATE_NOT_ALLOWED
          - DELETE_NOT_ALLOWED
          - APPDYNAMICS_CONFIGURATION_ERROR
          - APM_CONFIGURATION_ERROR
          - SPLUNK_CONFIGURATION_ERROR
          - ELK_CONFIGURATION_ERROR
          - LOGZ_CONFIGURATION_ERROR
          - SUMO_CONFIGURATION_ERROR
          - INSTANA_CONFIGURATION_ERROR
          - APPDYNAMICS_ERROR
          - STACKDRIVER_ERROR
          - STACKDRIVER_CONFIGURATION_ERROR
          - NEWRELIC_CONFIGURATION_ERROR
          - NEWRELIC_ERROR
          - DYNA_TRACE_CONFIGURATION_ERROR
          - DYNA_TRACE_ERROR
          - CLOUDWATCH_ERROR
          - CLOUDWATCH_CONFIGURATION_ERROR
          - PROMETHEUS_CONFIGURATION_ERROR
          - DATA_DOG_CONFIGURATION_ERROR
          - SERVICE_GUARD_CONFIGURATION_ERROR
          - ENCRYPTION_NOT_CONFIGURED
          - UNAVAILABLE_DELEGATES
          - WORKFLOW_EXECUTION_IN_PROGRESS
          - PIPELINE_EXECUTION_IN_PROGRESS
          - AWS_ACCESS_DENIED
          - AWS_CLUSTER_NOT_FOUND
          - AWS_SERVICE_NOT_FOUND
          - IMAGE_NOT_FOUND
          - ILLEGAL_ARGUMENT
          - IMAGE_TAG_NOT_FOUND
          - DELEGATE_NOT_AVAILABLE
          - INVALID_YAML_PAYLOAD
          - AUTHENTICATION_ERROR
          - AUTHORIZATION_ERROR
          - UNRECOGNIZED_YAML_FIELDS
          - COULD_NOT_MAP_BEFORE_YAML
          - MISSING_BEFORE_YAML
          - MISSING_YAML
          - NON_EMPTY_DELETIONS
          - GENERAL_YAML_ERROR
          - GENERAL_YAML_INFO
          - YAML_GIT_SYNC_ERROR
          - GIT_CONNECTION_ERROR
          - GIT_ERROR
          - ARTIFACT_SERVER_ERROR
          - ENCRYPT_DECRYPT_ERROR
          - SECRET_MANAGEMENT_ERROR
          - SECRET_NOT_FOUND
          - KMS_OPERATION_ERROR
          - GCP_KMS_OPERATION_ERROR
          - VAULT_OPERATION_ERROR
          - AWS_SECRETS_MANAGER_OPERATION_ERROR
          - AZURE_KEY_VAULT_OPERATION_ERROR
          - CYBERARK_OPERATION_ERROR
          - UNSUPPORTED_OPERATION_EXCEPTION
          - FEATURE_UNAVAILABLE
          - GENERAL_ERROR
          - BASELINE_CONFIGURATION_ERROR
          - SAML_IDP_CONFIGURATION_NOT_AVAILABLE
          - INVALID_AUTHENTICATION_MECHANISM
          - INVALID_SAML_CONFIGURATION
          - INVALID_OAUTH_CONFIGURATION
          - INVALID_LDAP_CONFIGURATION
          - USER_GROUP_SYNC_FAILURE
          - USER_GROUP_ALREADY_EXIST
          - INVALID_TWO_FACTOR_AUTHENTICATION_CONFIGURATION
          - EXPLANATION
          - HINT
          - NOT_WHITELISTED_IP
          - INVALID_TOTP_TOKEN
          - EMAIL_FAILED
          - SSL_HANDSHAKE_FAILED
          - NO_APPS_ASSIGNED
          - INVALID_INFRA_CONFIGURATION
          - TEMPLATES_LINKED
          - USER_HAS_NO_PERMISSIONS
          - USER_NOT_AUTHORIZED
          - USER_ALREADY_PRESENT
          - INVALID_USAGE_RESTRICTION
          - USAGE_RESTRICTION_ERROR
          - STATE_EXECUTION_INSTANCE_NOT_FOUND
          - DELEGATE_TASK_RETRY
          - KUBERNETES_API_TASK_EXCEPTION
          - KUBERNETES_TASK_EXCEPTION
          - KUBERNETES_YAML_ERROR
          - SAVE_FILE_INTO_GCP_STORAGE_FAILED
          - READ_FILE_FROM_GCP_STORAGE_FAILED
          - FILE_NOT_FOUND_ERROR
          - USAGE_LIMITS_EXCEEDED
          - EVENT_PUBLISH_FAILED
          - JIRA_ERROR
          - EXPRESSION_EVALUATION_FAILED
          - KUBERNETES_VALUES_ERROR
          - KUBERNETES_CLUSTER_ERROR
          - INCORRECT_SIGN_IN_MECHANISM
          - OAUTH_LOGIN_FAILED
          - INVALID_TERRAFORM_TARGETS_REQUEST
          - TERRAFORM_EXECUTION_ERROR
          - FILE_READ_FAILED
          - FILE_SIZE_EXCEEDS_LIMIT
          - CLUSTER_NOT_FOUND
          - MARKETPLACE_TOKEN_NOT_FOUND
          - INVALID_MARKETPLACE_TOKEN
          - INVALID_TICKETING_SERVER
          - SERVICENOW_ERROR
          - PASSWORD_EXPIRED
          - USER_LOCKED
          - PASSWORD_STRENGTH_CHECK_FAILED
          - ACCOUNT_DISABLED
          - INVALID_ACCOUNT_PERMISSION
          - PAGERDUTY_ERROR
          - HEALTH_ERROR
          - SAML_TEST_SUCCESS_MECHANISM_NOT_ENABLED
          - DOMAIN_WHITELIST_FILTER_CHECK_FAILED
          - INVALID_DASHBOARD_UPDATE_REQUEST
          - DUPLICATE_FIELD
          - INVALID_AZURE_VAULT_CONFIGURATION
          - USER_NOT_AUTHORIZED_DUE_TO_USAGE_RESTRICTIONS
          - INVALID_ROLLBACK
          - DATA_COLLECTION_ERROR
          - SUMO_DATA_COLLECTION_ERROR
          - DEPLOYMENT_GOVERNANCE_ERROR
          - BATCH_PROCESSING_ERROR
          - GRAPHQL_ERROR
          - FILE_CREATE_ERROR
          - ILLEGAL_STATE
          - GIT_DIFF_COMMIT_NOT_IN_ORDER
          - FAILED_TO_ACQUIRE_PERSISTENT_LOCK
          - FAILED_TO_ACQUIRE_NON_PERSISTENT_LOCK
          - POD_NOT_FOUND_ERROR
          - COMMAND_EXECUTION_ERROR
          - REGISTRY_EXCEPTION
          - ENGINE_INTERRUPT_PROCESSING_EXCEPTION
          - ENGINE_IO_EXCEPTION
          - ENGINE_OUTCOME_EXCEPTION
          - ENGINE_SWEEPING_OUTPUT_EXCEPTION
          - CACHE_NOT_FOUND_EXCEPTION
          - ENGINE_ENTITY_UPDATE_EXCEPTION
          - SHELL_EXECUTION_EXCEPTION
          - TEMPLATE_NOT_FOUND
          - AZURE_SERVICE_EXCEPTION
          - AZURE_CLIENT_EXCEPTION
          - GIT_UNSEEN_REMOTE_HEAD_COMMIT
          - TIMEOUT_ENGINE_EXCEPTION
          - NO_AVAILABLE_DELEGATES
          - NO_INSTALLED_DELEGATES
          - DUPLICATE_DELEGATE_EXCEPTION
          - GCP_MARKETPLACE_EXCEPTION
          - MISSING_DEFAULT_GOOGLE_CREDENTIALS
          - INCORRECT_DEFAULT_GOOGLE_CREDENTIALS
          - OPTIMISTIC_LOCKING_EXCEPTION
          - NG_PIPELINE_EXECUTION_EXCEPTION
          - NG_PIPELINE_CREATE_EXCEPTION
          - RESOURCE_NOT_FOUND_EXCEPTION
          - PMS_INITIALIZE_SDK_EXCEPTION
          - UNEXPECTED_SNIPPET_EXCEPTION
          - UNEXPECTED_SCHEMA_EXCEPTION
          - CONNECTOR_VALIDATION_EXCEPTION
          - TIMESCALE_NOT_AVAILABLE
          - MIGRATION_EXCEPTION
          - REQUEST_PROCESSING_INTERRUPTED
          - GCP_SECRET_MANAGER_OPERATION_ERROR
          - GCP_SECRET_OPERATION_ERROR
          - GIT_OPERATION_ERROR
          - TASK_FAILURE_ERROR
          - INSTANCE_STATS_PROCESS_ERROR
          - INSTANCE_STATS_MIGRATION_ERROR
          - DEPLOYMENT_MIGRATION_ERROR
          - INSTANCE_STATS_AGGREGATION_ERROR
          - UNRESOLVED_EXPRESSIONS_ERROR
          - KRYO_HANDLER_NOT_FOUND_ERROR
          - DELEGATE_ERROR_HANDLER_EXCEPTION
          - UNEXPECTED_TYPE_ERROR
          - EXCEPTION_HANDLER_NOT_FOUND
          - CONNECTOR_NOT_FOUND_EXCEPTION
          - GCP_SERVER_ERROR
          - HTTP_RESPONSE_EXCEPTION
          - SCM_NOT_FOUND_ERROR
          - SCM_CONFLICT_ERROR
          - SCM_UNPROCESSABLE_ENTITY
          - PROCESS_EXECUTION_EXCEPTION
          - SCM_UNAUTHORIZED
          - DATA
          - CONTEXT
          - PR_CREATION_ERROR
          - URL_NOT_REACHABLE
          - URL_NOT_PROVIDED
          - ENGINE_EXPRESSION_EVALUATION_ERROR
          - ENGINE_FUNCTOR_ERROR
          - JIRA_CLIENT_ERROR
          - SCM_NOT_MODIFIED
          - JIRA_STEP_ERROR
          - BUCKET_SERVER_ERROR
          - GIT_SYNC_ERROR
          - TEMPLATE_EXCEPTION
        message:
          type: string
        correlationId:
          type: string
        detailedMessage:
          type: string
        responseMessages:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage'
        metadata:
          $ref: '#/components/schemas/ErrorMetadataDTO'
        failedPermissionChecks:
          type: array
          items:
            $ref: '#/components/schemas/PermissionCheck'
    ResponseDTORoleAssignmentValidationResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        data:
          $ref: '#/components/schemas/RoleAssignmentValidationResponse'
        metaData:
          type: object
        correlationId:
          type: string
      example:
        metaData: {}
        data:
          roleValidationResult: null
          principalValidationResult:
            valid: true
            isValid: true
            errorMessage: errorMessage
          resourceGroupValidationResult: null
        correlationId: correlationId
        status: SUCCESS
    RoleAssignmentValidationResponse:
      type: object
      properties:
        principalValidationResult:
          $ref: '#/components/schemas/ValidationResult'
        roleValidationResult:
          $ref: '#/components/schemas/ValidationResult'
        resourceGroupValidationResult:
          $ref: '#/components/schemas/ValidationResult'
      example:
        roleValidationResult: null
        principalValidationResult:
          valid: true
          isValid: true
          errorMessage: errorMessage
        resourceGroupValidationResult: null
    ValidationResult:
      type: object
      properties:
        isValid:
          type: boolean
          writeOnly: true
        errorMessage:
          type: string
        valid:
          type: boolean
      example:
        valid: true
        isValid: true
        errorMessage: errorMessage
    RoleAssignment:
      type: object
      properties:
        identifier:
          type: string
        resourceGroupIdentifier:
          type: string
        roleIdentifier:
          type: string
        principal:
          $ref: '#/components/schemas/Principal'
        disabled:
          type: boolean
        managed:
          type: boolean
      example:
        principal:
          identifier: identifier
          type: USER
        identifier: identifier
        roleIdentifier: roleIdentifier
        managed: true
        disabled: true
        resourceGroupIdentifier: resourceGroupIdentifier
    RoleAssignmentValidationRequest:
      required:
      - roleAssignment
      type: object
      properties:
        roleAssignment:
          $ref: '#/components/schemas/RoleAssignment'
        validatePrincipal:
          type: boolean
        validateRole:
          type: boolean
        validateResourceGroup:
          type: boolean
    ResourceGroup:
      type: object
      properties:
        identifier:
          type: string
        name:
          type: string
      example:
        identifier: identifier
        name: name
    ResponseDTORoleAssignmentAggregateResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        data:
          $ref: '#/components/schemas/RoleAssignmentAggregateResponse'
        metaData:
          type: object
        correlationId:
          type: string
      example:
        metaData: {}
        data:
          resourceGroups:
          - identifier: identifier
            name: name
          - identifier: identifier
            name: name
          scope:
            orgIdentifier: orgIdentifier
            accountIdentifier: accountIdentifier
            projectIdentifier: projectIdentifier
          roles:
          - createdAt: 0
            role:
              identifier: identifier
              permissions:
              - permissions
              - permissions
              name: name
              description: description
              allowedScopeLevels:
              - allowedScopeLevels
              - allowedScopeLevels
              tags:
                key: tags
            lastModifiedAt: 6
            scope: null
            harnessManaged: true
          - createdAt: 0
            role:
              identifier: identifier
              permissions:
              - permissions
              - permissions
              name: name
              description: description
              allowedScopeLevels:
              - allowedScopeLevels
              - allowedScopeLevels
              tags:
                key: tags
            lastModifiedAt: 6
            scope: null
            harnessManaged: true
          roleAssignments:
          - principal:
              identifier: identifier
              type: USER
            identifier: identifier
            roleIdentifier: roleIdentifier
            managed: true
            disabled: true
            resourceGroupIdentifier: resourceGroupIdentifier
          - principal:
              identifier: identifier
              type: USER
            identifier: identifier
            roleIdentifier: roleIdentifier
            managed: true
            disabled: true
            resourceGroupIdentifier: resourceGroupIdentifier
        correlationId: correlationId
        status: SUCCESS
    Role:
      type: object
      properties:
        identifier:
          type: string
        name:
          type: string
        permissions:
          uniqueItems: true
          type: array
          items:
            type: string
        allowedScopeLevels:
          uniqueItems: true
          type: array
          items:
            type: string
        description:
          type: string
        tags:
          type: object
          additionalProperties:
            type: string
      example:
        identifier: identifier
        permissions:
        - permissions
        - permissions
        name: name
        description: description
        allowedScopeLevels:
        - allowedScopeLevels
        - allowedScopeLevels
        tags:
          key: tags
    RoleAssignmentAggregateResponse:
      type: object
      properties:
        roleAssignments:
          type: array
          items:
            $ref: '#/components/schemas/RoleAssignment'
        scope:
          $ref: '#/components/schemas/Scope'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponse'
        resourceGroups:
          type: array
          items:
            $ref: '#/components/schemas/ResourceGroup'
      example:
        resourceGroups:
        - identifier: identifier
          name: name
        - identifier: identifier
          name: name
        scope:
          orgIdentifier: orgIdentifier
          accountIdentifier: accountIdentifier
          projectIdentifier: projectIdentifier
        roles:
        - createdAt: 0
          role:
            identifier: identifier
            permissions:
            - permissions
            - permissions
            name: name
            description: description
            allowedScopeLevels:
            - allowedScopeLevels
            - allowedScopeLevels
            tags:
              key: tags
          lastModifiedAt: 6
          scope: null
          harnessManaged: true
        - createdAt: 0
          role:
            identifier: identifier
            permissions:
            - permissions
            - permissions
            name: name
            description: description
            allowedScopeLevels:
            - allowedScopeLevels
            - allowedScopeLevels
            tags:
              key: tags
          lastModifiedAt: 6
          scope: null
          harnessManaged: true
        roleAssignments:
        - principal:
            identifier: identifier
            type: USER
          identifier: identifier
          roleIdentifier: roleIdentifier
          managed: true
          disabled: true
          resourceGroupIdentifier: resourceGroupIdentifier
        - principal:
            identifier: identifier
            type: USER
          identifier: identifier
          roleIdentifier: roleIdentifier
          managed: true
          disabled: true
          resourceGroupIdentifier: resourceGroupIdentifier
    RoleResponse:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/Role'
        scope:
          $ref: '#/components/schemas/Scope'
        harnessManaged:
          type: boolean
        createdAt:
          type: integer
          format: int64
        lastModifiedAt:
          type: integer
          format: int64
      example:
        createdAt: 0
        role:
          identifier: identifier
          permissions:
          - permissions
          - permissions
          name: name
          description: description
          allowedScopeLevels:
          - allowedScopeLevels
          - allowedScopeLevels
          tags:
            key: tags
        lastModifiedAt: 6
        scope: null
        harnessManaged: true
    Scope:
      type: object
      properties:
        accountIdentifier:
          type: string
        orgIdentifier:
          type: string
        projectIdentifier:
          type: string
      example:
        orgIdentifier: orgIdentifier
        accountIdentifier: accountIdentifier
        projectIdentifier: projectIdentifier
    RoleAssignmentFilter:
      type: object
      properties:
        resourceGroupFilter:
          uniqueItems: true
          type: array
          items:
            type: string
        roleFilter:
          uniqueItems: true
          type: array
          items:
            type: string
        principalTypeFilter:
          uniqueItems: true
          type: array
          items:
            type: string
            enum:
            - USER
            - USER_GROUP
            - SERVICE
            - API_KEY
            - SERVICE_ACCOUNT
        principalFilter:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Principal'
        harnessManagedFilter:
          uniqueItems: true
          type: array
          items:
            type: boolean
        disabledFilter:
          uniqueItems: true
          type: array
          items:
            type: boolean
    PageResponseRoleAssignmentResponse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int64
        totalItems:
          type: integer
          format: int64
        pageItemCount:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        content:
          type: array
          items:
            $ref: '#/components/schemas/RoleAssignmentResponse'
        pageIndex:
          type: integer
          format: int64
        empty:
          type: boolean
      example:
        totalItems: 6
        pageIndex: 7
        totalPages: 0
        pageSize: 5
        pageItemCount: 1
        content:
        - createdAt: 5
          lastModifiedAt: 2
          scope:
            orgIdentifier: orgIdentifier
            accountIdentifier: accountIdentifier
            projectIdentifier: projectIdentifier
          roleAssignment:
            principal:
              identifier: identifier
              type: USER
            identifier: identifier
            roleIdentifier: roleIdentifier
            managed: true
            disabled: true
            resourceGroupIdentifier: resourceGroupIdentifier
          harnessManaged: true
        - createdAt: 5
          lastModifiedAt: 2
          scope:
            orgIdentifier: orgIdentifier
            accountIdentifier: accountIdentifier
            projectIdentifier: projectIdentifier
          roleAssignment:
            principal:
              identifier: identifier
              type: USER
            identifier: identifier
            roleIdentifier: roleIdentifier
            managed: true
            disabled: true
            resourceGroupIdentifier: resourceGroupIdentifier
          harnessManaged: true
        empty: true
    ResponseDTOPageResponseRoleAssignmentResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        data:
          $ref: '#/components/schemas/PageResponseRoleAssignmentResponse'
        metaData:
          type: object
        correlationId:
          type: string
      example:
        metaData: {}
        data:
          totalItems: 6
          pageIndex: 7
          totalPages: 0
          pageSize: 5
          pageItemCount: 1
          content:
          - createdAt: 5
            lastModifiedAt: 2
            scope:
              orgIdentifier: orgIdentifier
              accountIdentifier: accountIdentifier
              projectIdentifier: projectIdentifier
            roleAssignment:
              principal:
                identifier: identifier
                type: USER
              identifier: identifier
              roleIdentifier: roleIdentifier
              managed: true
              disabled: true
              resourceGroupIdentifier: resourceGroupIdentifier
            harnessManaged: true
          - createdAt: 5
            lastModifiedAt: 2
            scope:
              orgIdentifier: orgIdentifier
              accountIdentifier: accountIdentifier
              projectIdentifier: projectIdentifier
            roleAssignment:
              principal:
                identifier: identifier
                type: USER
              identifier: identifier
              roleIdentifier: roleIdentifier
              managed: true
              disabled: true
              resourceGroupIdentifier: resourceGroupIdentifier
            harnessManaged: true
          empty: true
        correlationId: correlationId
        status: SUCCESS
    RoleAssignmentResponse:
      type: object
      properties:
        roleAssignment:
          $ref: '#/components/schemas/RoleAssignment'
        scope:
          $ref: '#/components/schemas/Scope'
        createdAt:
          type: integer
          format: int64
        lastModifiedAt:
          type: integer
          format: int64
        harnessManaged:
          type: boolean
      example:
        createdAt: 5
        lastModifiedAt: 2
        scope:
          orgIdentifier: orgIdentifier
          accountIdentifier: accountIdentifier
          projectIdentifier: projectIdentifier
        roleAssignment:
          principal:
            identifier: identifier
            type: USER
          identifier: identifier
          roleIdentifier: roleIdentifier
          managed: true
          disabled: true
          resourceGroupIdentifier: resourceGroupIdentifier
        harnessManaged: true
    SortOrder:
      type: object
      properties:
        fieldName:
          type: string
        orderType:
          type: string
          enum:
          - ASC
          - DESC
    ResponseDTORoleAssignmentResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        data:
          $ref: '#/components/schemas/RoleAssignmentResponse'
        metaData:
          type: object
        correlationId:
          type: string
      example:
        metaData: {}
        data:
          createdAt: 5
          lastModifiedAt: 2
          scope:
            orgIdentifier: orgIdentifier
            accountIdentifier: accountIdentifier
            projectIdentifier: projectIdentifier
          roleAssignment:
            principal:
              identifier: identifier
              type: USER
            identifier: identifier
            roleIdentifier: roleIdentifier
            managed: true
            disabled: true
            resourceGroupIdentifier: resourceGroupIdentifier
          harnessManaged: true
        correlationId: correlationId
        status: SUCCESS
    ResponseDTOListRoleAssignmentResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        data:
          type: array
          items:
            $ref: '#/components/schemas/RoleAssignmentResponse'
        metaData:
          type: object
        correlationId:
          type: string
      example:
        metaData: {}
        data:
        - createdAt: 5
          lastModifiedAt: 2
          scope:
            orgIdentifier: orgIdentifier
            accountIdentifier: accountIdentifier
            projectIdentifier: projectIdentifier
          roleAssignment:
            principal:
              identifier: identifier
              type: USER
            identifier: identifier
            roleIdentifier: roleIdentifier
            managed: true
            disabled: true
            resourceGroupIdentifier: resourceGroupIdentifier
          harnessManaged: true
        - createdAt: 5
          lastModifiedAt: 2
          scope:
            orgIdentifier: orgIdentifier
            accountIdentifier: accountIdentifier
            projectIdentifier: projectIdentifier
          roleAssignment:
            principal:
              identifier: identifier
              type: USER
            identifier: identifier
            roleIdentifier: roleIdentifier
            managed: true
            disabled: true
            resourceGroupIdentifier: resourceGroupIdentifier
          harnessManaged: true
        correlationId: correlationId
        status: SUCCESS
    RoleAssignmentCreateRequest:
      type: object
      properties:
        roleAssignments:
          type: array
          items:
            $ref: '#/components/schemas/RoleAssignment'
    PageResponseRoleResponse:
      type: object
      properties:
        totalPages:
          type: integer
          format: int64
        totalItems:
          type: integer
          format: int64
        pageItemCount:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        content:
          type: array
          items:
            $ref: '#/components/schemas/RoleResponse'
        pageIndex:
          type: integer
          format: int64
        empty:
          type: boolean
      example:
        totalItems: 6
        pageIndex: 5
        totalPages: 0
        pageSize: 5
        pageItemCount: 1
        content:
        - createdAt: 0
          role:
            identifier: identifier
            permissions:
            - permissions
            - permissions
            name: name
            description: description
            allowedScopeLevels:
            - allowedScopeLevels
            - allowedScopeLevels
            tags:
              key: tags
          lastModifiedAt: 6
          scope: null
          harnessManaged: true
        - createdAt: 0
          role:
            identifier: identifier
            permissions:
            - permissions
            - permissions
            name: name
            description: description
            allowedScopeLevels:
            - allowedScopeLevels
            - allowedScopeLevels
            tags:
              key: tags
          lastModifiedAt: 6
          scope: null
          harnessManaged: true
        empty: true
    ResponseDTOPageResponseRoleResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        data:
          $ref: '#/components/schemas/PageResponseRoleResponse'
        metaData:
          type: object
        correlationId:
          type: string
      example:
        metaData: {}
        data:
          totalItems: 6
          pageIndex: 5
          totalPages: 0
          pageSize: 5
          pageItemCount: 1
          content:
          - createdAt: 0
            role:
              identifier: identifier
              permissions:
              - permissions
              - permissions
              name: name
              description: description
              allowedScopeLevels:
              - allowedScopeLevels
              - allowedScopeLevels
              tags:
                key: tags
            lastModifiedAt: 6
            scope: null
            harnessManaged: true
          - createdAt: 0
            role:
              identifier: identifier
              permissions:
              - permissions
              - permissions
              name: name
              description: description
              allowedScopeLevels:
              - allowedScopeLevels
              - allowedScopeLevels
              tags:
                key: tags
            lastModifiedAt: 6
            scope: null
            harnessManaged: true
          empty: true
        correlationId: correlationId
        status: SUCCESS
    ResponseDTORoleResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        data:
          $ref: '#/components/schemas/RoleResponse'
        metaData:
          type: object
        correlationId:
          type: string
      example:
        metaData: {}
        data:
          createdAt: 0
          role:
            identifier: identifier
            permissions:
            - permissions
            - permissions
            name: name
            description: description
            allowedScopeLevels:
            - allowedScopeLevels
            - allowedScopeLevels
            tags:
              key: tags
          lastModifiedAt: 6
          scope: null
          harnessManaged: true
        correlationId: correlationId
        status: SUCCESS
    FeatureRestrictionUsageDTO:
      type: object
      properties:
        count:
          type: integer
          format: int64
      example:
        count: 0
    ResponseDTOFeatureRestrictionUsageDTO:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        data:
          $ref: '#/components/schemas/FeatureRestrictionUsageDTO'
        metaData:
          type: object
        correlationId:
          type: string
      example:
        metaData: {}
        data:
          count: 0
        correlationId: correlationId
        status: SUCCESS
    AvailabilityRestrictionMetadataDTO:
      type: object
      allOf:
      - $ref: '#/components/schemas/RestrictionMetadataDTO'
      - type: object
        properties:
          enabled:
            type: boolean
    CustomRestrictionMetadataDTO:
      type: object
      allOf:
      - $ref: '#/components/schemas/RestrictionMetadataDTO'
    DurationRestrictionMetadataDTO:
      type: object
      allOf:
      - $ref: '#/components/schemas/RestrictionMetadataDTO'
      - type: object
        properties:
          timeUnit:
            $ref: '#/components/schemas/TimeUnit'
    RateLimitRestrictionMetadataDTO:
      type: object
      allOf:
      - $ref: '#/components/schemas/RestrictionMetadataDTO'
      - type: object
        properties:
          limit:
            type: integer
            format: int64
          timeUnit:
            $ref: '#/components/schemas/TimeUnit'
          allowedIfEqual:
            type: boolean
    RestrictionMetadataDTO:
      type: object
      properties:
        restrictionType:
          type: string
          enum:
          - AVAILABILITY
          - STATIC_LIMIT
          - RATE_LIMIT
          - CUSTOM
          - DURATION
      discriminator:
        propertyName: restrictionType
    StaticLimitRestrictionMetadataDTO:
      type: object
      allOf:
      - $ref: '#/components/schemas/RestrictionMetadataDTO'
      - type: object
        properties:
          limit:
            type: integer
            format: int64
          allowedIfEqual:
            type: boolean
    TimeUnit:
      type: object
      properties:
        unit:
          type: string
          enum:
          - Nanos
          - Micros
          - Millis
          - Seconds
          - Minutes
          - Hours
          - HalfDays
          - Days
          - Weeks
          - Months
          - Years
          - Decades
          - Centuries
          - Millennia
          - Eras
          - Forever
        numberOfUnits:
          type: integer
          format: int32
    ResponseDTOBoolean:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
          - ERROR
        data:
          type: boolean
        metaData:
          type: object
        correlationId:
          type: string
      example:
        metaData: {}
        data: true
        correlationId: correlationId
        status: SUCCESS
    CustomRestrictionEvaluationDTO:
      type: object
      properties:
        accountIdentifier:
          type: string
        featureRestrictionName:
          type: string
          enum:
          - TEST1
          - TEST2
          - TEST3
          - TEST4
          - TEST5
          - PERSPECTIVES
          - CCM_K8S_CLUSTERS
          - MULTIPLE_ORGANIZATIONS
          - MULTIPLE_PROJECTS
          - INTEGRATED_APPROVALS_WITH_HARNESS_UI
          - INTEGRATED_APPROVALS_WITH_JIRA
          - SECRET_MANAGERS
          - DEPLOYMENTS
          - SERVICES
          - BUILDS
          - SAML_SUPPORT
          - OAUTH_SUPPORT
          - LDAP_SUPPORT
          - TWO_FACTOR_AUTH_SUPPORT
          - CUSTOM_ROLES
          - CUSTOM_RESOURCE_GROUPS
          - K8S_BG_SWAP_SERVICES
          - K8S_BLUE_GREEN_DEPLOY
          - K8S_APPLY
          - K8S_DELETE
          - K8S_CANARY_DELETE
          - K8S_ROLLING_DEPLOY
          - K8S_CANARY_DEPLOY
          - K8S_SCALE
          - K8S_ROLLING_ROLLBACK
          - TERRAFORM_APPLY
          - TERRAFORM_PLAN
          - TERRAFORM_DESTROY
          - TERRAFORM_ROLLBACK
        moduleType:
          type: string
          enum:
          - CD
          - CI
          - CV
          - CF
          - CE
          - CORE
          - PMS
          - TEMPLATESERVICE
        edition:
          type: string
          enum:
          - COMMUNITY
          - FREE
          - TEAM
          - ENTERPRISE
    ResponseMessage_exception_stackTrace:
      type: object
      properties:
        methodName:
          type: string
        fileName:
          type: string
        lineNumber:
          type: integer
          format: int32
        className:
          type: string
        nativeMethod:
          type: boolean
    ResponseMessage_exception_suppressed:
      type: object
      properties:
        stackTrace:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage_exception_stackTrace'
        message:
          type: string
        localizedMessage:
          type: string
    ResponseMessage_exception:
      type: object
      properties:
        stackTrace:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage_exception_stackTrace'
        message:
          type: string
        localizedMessage:
          type: string
        suppressed:
          type: array
          items:
            $ref: '#/components/schemas/ResponseMessage_exception_suppressed'
